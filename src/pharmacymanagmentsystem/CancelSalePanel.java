/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pharmacymanagmentsystem;
import javax.swing.*;
import java.awt.*;
/**
 *
 * @author mapple.pk
 */
public class CancelSalePanel extends javax.swing.JPanel {

    /**
     * Creates new form CancelSalePanel
     */
    public CancelSalePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents



//    private SalesRecordManager salesManager;
//    private JTextField saleIDField;
//    private JButton cancelButton;
//
//    public CancelSalePanel(SalesRecordManager salesManager) {
//        this.salesManager = salesManager;
//
//        saleIDField = new JTextField(15);
//        cancelButton = new JButton("Cancel Sale");
//
//        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
//        inputPanel.add(new JLabel("Enter Sale ID:"));
//        inputPanel.add(saleIDField);
//        inputPanel.add(cancelButton);
//
//        setLayout(new BorderLayout());
//        add(inputPanel, BorderLayout.NORTH);
//
//        cancelButton.addActionListener(e -> {
//            String saleID = saleIDField.getText().trim();
//            if (saleID.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Please enter a Sale ID.");
//                return;
//            }
//
//            SalesRecord sale = salesManager.findSaleByID(saleID);
//            if (sale == null) {
//                JOptionPane.showMessageDialog(this, "Sale not found.");
//                return;
//            }
//
//            sale.updateEditableStatus();
//            if (!sale.isEditable()) {
//                JOptionPane.showMessageDialog(this, "Sale is locked and cannot be canceled.");
//                return;
//            }
//
//            boolean success = salesManager.cancelSale(sale);
//            if (success) {
//                JOptionPane.showMessageDialog(this, "Sale canceled and stock restored.");
//            } else {
//                JOptionPane.showMessageDialog(this, "Failed to cancel sale.");
//            }
//        });
//    }
//
//
    
      private SalesRecordManager salesManager;
    private JTextField saleIDField;
    private JButton cancelButton;
    private MedicineManager medicineManager;
    private Customer_Manager customerManager;
    public CancelSalePanel(SalesRecordManager salesManager, MedicineManager medicineManager,Customer_Manager customerManager) {
        this.salesManager = salesManager;
this.medicineManager=medicineManager;
this.customerManager=customerManager;
        saleIDField = new JTextField(15);
        cancelButton = new JButton("Cancel Sale");

        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        inputPanel.add(new JLabel("Enter Sale ID:"));
        inputPanel.add(saleIDField);
        inputPanel.add(cancelButton);

        setLayout(new BorderLayout());
        add(inputPanel, BorderLayout.NORTH);

        cancelButton.addActionListener(e -> {
            String saleID = saleIDField.getText().trim();
            if (saleID.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a Sale ID.");
                return;
            }

            SalesRecord sale = salesManager.findSaleByIDFromDatabase(saleID, customerManager, medicineManager);
            if (sale == null) {
                JOptionPane.showMessageDialog(this, "Sale not found.");
                return;
            }

            sale.updateEditableStatus();
            if (!sale.isEditable()) {
                JOptionPane.showMessageDialog(this, "Sale is locked and cannot be canceled.");
                return;
            }

            boolean success = salesManager.cancelSaleInDatabase(sale,medicineManager);
            if (success) {
                sale.setCancelled(true); // Mark it visually and logically
                JOptionPane.showMessageDialog(this, "Sale cancelled. Status: CANCELLED and stock restored.");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to cancel sale.");
            }
        });
    }
} 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

