/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package pharmacymanagmentsystem;


import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author mapple.pk
 */
public class ViewAllSalePanel extends javax.swing.JPanel {

    /** Creates new form ViewAllSalePanel */
    public ViewAllSalePanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
//private SalesRecordManager salesManager;
//    private JTable salesTable;
//    private JTable itemsTable;
//    private DefaultTableModel salesTableModel;
//    private DefaultTableModel itemsTableModel;
//
//    public ViewAllSalePanel(SalesRecordManager salesManager) {
//        this.salesManager = salesManager;
//        setLayout(new BorderLayout());
//
//        // Sales Table
//        salesTableModel = new DefaultTableModel(new String[]{"Sale ID", "Customer", "Processed By", "Total", "Status"}, 0);
//        salesTable = new JTable(salesTableModel);
//        loadSales();
//
//        JScrollPane salesScroll = new JScrollPane(salesTable);
//        salesScroll.setPreferredSize(new Dimension(500, 150));
//
//        // Items Table
//        itemsTableModel = new DefaultTableModel(new String[]{"Medicine", "Qty", "Price", "Total"}, 0);
//        itemsTable = new JTable(itemsTableModel);
//        JScrollPane itemsScroll = new JScrollPane(itemsTable);
//
//        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, salesScroll, itemsScroll);
//        splitPane.setDividerLocation(200);
//
//        add(splitPane, BorderLayout.CENTER);
//
//        // Event on Sale Selection
//        salesTable.addMouseListener(new MouseAdapter() {
//            public void mouseClicked(MouseEvent e) {
//                int selectedRow = salesTable.getSelectedRow();
//                if (selectedRow != -1) {
//                    String saleID = (String) salesTableModel.getValueAt(selectedRow, 0);
//                    SalesRecord sale = salesManager.findSaleByID(saleID);
//                    loadItemsForSale(sale);
//                }
//            }
//        });
//    }
//
//    private void loadSales() {
//        salesTableModel.setRowCount(0);
//        List<SalesRecord> sales = salesManager.getAllSales();
//        for (SalesRecord sale : sales) {
//            salesTableModel.addRow(new Object[]{
//                    sale.getSaleID(),
//                    sale.getCustomer() != null ? sale.getCustomer().getName() : "N/A",
//                    sale.getProcessedBy(),
//                    String.format("%.2f", sale.calculateTotal()),
//                    sale.isEditable() ? "Editable" : "Locked"
//            });
//        }
//    }
//
//    private void loadItemsForSale(SalesRecord sale) {
//        itemsTableModel.setRowCount(0);
//        if (sale == null) return;
//        for (SaleItem item : sale.getSoldItems()) {
//            itemsTableModel.addRow(new Object[]{
//                    item.getMedicine().getName(),
//                    item.getQuantity(),
//                    item.getMedicine().getPrice(),
//                    item.calculateItemTotal()
//            });
//        }
//    }

    
    
//
//    private SalesRecordManager salesManager;
//    private JTable salesTable;
//    private JTable itemsTable;
//    private DefaultTableModel salesTableModel;
//    private DefaultTableModel itemsTableModel;
//
//    public ViewAllSalePanel(SalesRecordManager salesManager) {
//        this.salesManager = salesManager;
//        setLayout(new BorderLayout());
//
//        // 🔁 Refresh Button
//        JButton refreshButton = new JButton("🔁 Refresh Sales");
//        refreshButton.addActionListener(e -> loadSales());
//
//        // Top Panel with Button
//        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
//        topPanel.add(refreshButton);
//        add(topPanel, BorderLayout.NORTH);
//
//        // Sales Table
//        salesTableModel = new DefaultTableModel(new String[]{"Sale ID", "Customer", "Processed By", "Total", "Status"}, 0);
//        salesTable = new JTable(salesTableModel) {
//    public boolean isCellEditable(int row, int column) {
//        return false; // No cell editable
//    }};
//        JScrollPane salesScroll = new JScrollPane(salesTable);
//        salesScroll.setPreferredSize(new Dimension(500, 150));
//
//        // Items Table
//        itemsTableModel = new DefaultTableModel(new String[]{"Medicine", "Qty", "Price", "Total"}, 0);
//        itemsTable = new JTable(itemsTableModel){
//        public boolean isCellEditable(int row, int column) {
//        return false;
//    }
//        };
//        JScrollPane itemsScroll = new JScrollPane(itemsTable);
//
//        // Split View
//        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, salesScroll, itemsScroll);
//        splitPane.setDividerLocation(200);
//        add(splitPane, BorderLayout.CENTER);
//
//        // Load initial data
//        loadSales();
//
//        // Sale selection event
//        salesTable.addMouseListener(new MouseAdapter() {
//            public void mouseClicked(MouseEvent e) {
//                int selectedRow = salesTable.getSelectedRow();
//                if (selectedRow != -1) {
//                    String saleID = (String) salesTableModel.getValueAt(selectedRow, 0);
//                    SalesRecord sale = salesManager.findSaleByID(saleID);
//                    loadItemsForSale(sale);
//                }
//            }
//        });
//    }
//
//
//    public void loadSales() {
//        salesTableModel.setRowCount(0);
//        List<SalesRecord> sales = salesManager.getAllSales();
//        for (SalesRecord sale : sales) {
//            salesTableModel.addRow(new Object[]{
//                    sale.getSaleID(),
//                    sale.getCustomer() != null ? sale.getCustomer().getName() : "N/A",
//                    sale.getProcessedBy(),
//                    String.format("%.2f", sale.calculateTotal()),
//                    sale.isEditable() ? "Editable" : "Locked"
//            });
//        }
//    }
////
////   
//    private void loadItemsForSale(SalesRecord sale) {
//    itemsTableModel.setRowCount(0); // Clear table
//    if (sale == null || sale.getSoldItems() == null) {
//        JOptionPane.showMessageDialog(this, "No items found for selected sale.");
//        return;
//    }
//
//    for (SaleItem item : sale.getSoldItems()) {
//        itemsTableModel.addRow(new Object[]{
//            item.getMedicine().getName(),
//            item.getQuantity(),
//            item.getMedicine().getPrice(),
//            item.calculateItemTotal()
//        });
//    }
//    }
//}


    private SalesRecordManager salesManager;
    private JTable salesTable;
    private JTable itemsTable;
    private DefaultTableModel salesTableModel;
    private DefaultTableModel itemsTableModel;

    public ViewAllSalePanel(SalesRecordManager salesManager,Customer_Manager customerManager, MedicineManager medicineManager) {
        this.salesManager = salesManager;
        
        setLayout(new BorderLayout());

        // 📌 Top Panel
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        JButton refreshButton = new JButton("🔁 Refresh");
        refreshButton.addActionListener(e -> loadSales( customerManager, medicineManager));
        JButton viewItemsButton = new JButton("📦 View Items");
        viewItemsButton.addActionListener(e -> {
            int selectedRow = salesTable.getSelectedRow();
            if (selectedRow != -1) {
                String saleID = (String) salesTableModel.getValueAt(selectedRow, 0);
                SalesRecord sale = salesManager.findSaleByIDFromDatabase(saleID, customerManager, medicineManager);;
                loadItemsForSale(sale);
            } else {
                JOptionPane.showMessageDialog(this, "Please select a sale row first.");
            }
        });

        topPanel.add(refreshButton);
        topPanel.add(viewItemsButton);
        add(topPanel, BorderLayout.NORTH);

        // 🧾 Sales Table
        salesTableModel = new DefaultTableModel(new String[]{"Sale ID", "Customer", "Processed By", "Total", "Status"}, 0);
        salesTable = new JTable(salesTableModel) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JScrollPane salesScroll = new JScrollPane(salesTable);
        salesScroll.setPreferredSize(new Dimension(500, 200));

        // 💊 Items Table
        itemsTableModel = new DefaultTableModel(new String[]{"Medicine", "Qty", "Price", "Total"}, 0);
        itemsTable = new JTable(itemsTableModel) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JScrollPane itemsScroll = new JScrollPane(itemsTable);

        // 🪟 Split View
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, salesScroll, itemsScroll);
        splitPane.setDividerLocation(250);
        add(splitPane, BorderLayout.CENTER);

        // 🔃 Load on startup
//        loadSales(customerManager,medicineManager);
    }

//    private void loadSales() {
//        salesTableModel.setRowCount(0);
//        List<SalesRecord> sales = salesManager.getAllSales();
//        for (SalesRecord sale : sales) {
//            double total = sale.calculateTotal();
//            String processedBy = sale.getProcessedBy() != null ? sale.getProcessedBy() : "N/A";
//            String customerName = (sale.getCustomer() != null && sale.getCustomer().getName() != null)
//                    ? sale.getCustomer().getName() : "N/A";
//
//            salesTableModel.addRow(new Object[]{
//                    sale.getSaleID(),
//                    customerName,
//                    processedBy,
//                    String.format("%.2f", total),
//                    sale.isEditable() ? "Editable" : "Locked"
//            });
//        }
//    }
private void loadSales(Customer_Manager customerManager, MedicineManager medicineManager) {
    
    salesTableModel.setRowCount(0);

    // ✅ Load fresh from DB
    List<SalesRecord> sales = salesManager.getAllSales(customerManager, medicineManager);

    for (SalesRecord sale : sales) {
        sale.updateEditableStatus(); // Optional: logic based on time
        sale.updateEditableStatusInDatabase();
        double total = sale.calculateTotal();
        String processedBy = sale.getProcessedBy() != null ? sale.getProcessedBy() : "N/A";
        String customerName = (sale.getCustomer() != null) ? sale.getCustomer().getName() : "N/A";

        String status;
        if (sale.isCancelled()) {
            status = "Cancelled";
        } else if (sale.isEditable()) {
            status = "Editable";
        } else {
            status = "Locked";
        }

        salesTableModel.addRow(new Object[]{
                sale.getSaleID(),
                customerName,
                processedBy,
                String.format("%.2f", total),
                status
        });
    }

    salesTable.revalidate();
    salesTable.repaint();
}

    private void loadItemsForSale(SalesRecord sale) {
        itemsTableModel.setRowCount(0);
        if (sale == null || sale.getSoldItems() == null) {
            JOptionPane.showMessageDialog(this, "No items found for selected sale.");
            return;
        }

        for (SaleItem item : sale.getSoldItems()) {
            itemsTableModel.addRow(new Object[]{
                    item.getMedicine().getName(),
                    item.getQuantity(),
                    item.getMedicine().getPrice(),
                    item.calculateItemTotal()
            });
        }
         // Force repaint & validate
    itemsTable.revalidate();
    itemsTable.repaint();
    }
}

    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


