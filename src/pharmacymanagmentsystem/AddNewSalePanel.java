/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pharmacymanagmentsystem;
import pharmacymanagmentsystem.DBConnection;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.time.LocalDateTime;
import static java.time.LocalDateTime.now;
import java.util.ArrayList;
import java.util.List;


//forr sql///
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JOptionPane;


/**
 *
 * @author mapple.pk
 */
public class AddNewSalePanel extends javax.swing.JPanel {

    
    /**
     * Creates new form AddNewSalePanel
     */
    public AddNewSalePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents



//    private SalesRecordManager salesManager;
//    private MedicineManager medicineManager;
//    private String currentEmployee;
//    private List<SaleItem> currentSaleItems = new ArrayList<>();
//
//    public AddNewSalePanel(SalesRecordManager salesManager, MedicineManager medicineManager) {
//        this.salesManager = salesManager;
//        this.medicineManager = medicineManager;
////        this.currentEmployee = currentEmployee;
//
//        // GUI Components declared and initialized here
//        JTextField medicineSearchField = new JTextField(15);
//        JTextField quantityField = new JTextField(5);
//        JButton addItemButton = new JButton("Add Item");
//        JButton removeItemButton = new JButton("Remove Selected");
//        JButton confirmSaleButton = new JButton("Confirm Sale");
//        JLabel totalLabel = new JLabel("Total: Rs. 0.00");
//
//        String[] columns = {"Medicine", "Quantity", "Price", "Total"};
//        DefaultTableModel tableModel = new DefaultTableModel(columns, 0);
//        JTable saleTable = new JTable(tableModel);
//        JScrollPane scrollPane = new JScrollPane(saleTable);
//
//        JPanel topPanel = new JPanel(new FlowLayout());
//        topPanel.add(new JLabel("Medicine:"));
//        topPanel.add(medicineSearchField);
//        topPanel.add(new JLabel("Quantity:"));
//        topPanel.add(quantityField);
//        topPanel.add(addItemButton);
//        topPanel.add(removeItemButton);
//
//        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
//        bottomPanel.add(totalLabel);
//        bottomPanel.add(confirmSaleButton);
//
//        setLayout(new BorderLayout());
//        add(topPanel, BorderLayout.NORTH);
//        add(scrollPane, BorderLayout.CENTER);
//        add(bottomPanel, BorderLayout.SOUTH);
//
//        addItemButton.addActionListener(e -> {
//            String name = medicineSearchField.getText().trim();
//            String qtyText = quantityField.getText().trim();
//            if (name.isEmpty() || qtyText.isEmpty()) return;
//
//            Medicine med = medicineManager.findMedicineByName(name);
//            if (med == null) {
//                JOptionPane.showMessageDialog(this, "Medicine not found.");
//                return;
//            }
//
//            int qty;
//            try {
//                qty = Integer.parseInt(qtyText);
//            } catch (NumberFormatException ex) {
//                JOptionPane.showMessageDialog(this, "Invalid quantity.");
//                return;
//            }
//
//            SaleItem item = salesManager.createSaleItem(med, qty);
//            if (item == null) {
//                JOptionPane.showMessageDialog(this, "Invalid quantity or stock not enough.");
//                return;
//            }
//
//            currentSaleItems.add(item);
//            tableModel.addRow(new Object[]{med.getName(), qty, med.getPrice(), item.calculateItemTotal()});
//            updateTotalLabel(totalLabel);
//            medicineSearchField.setText("");
//            quantityField.setText("");
//        });
//
//        removeItemButton.addActionListener(e -> {
//            int row = saleTable.getSelectedRow();
//            if (row != -1) {
//                SaleItem item = currentSaleItems.get(row);
//                item.getMedicine().updateStock(item.getQuantity());
//                currentSaleItems.remove(row);
//                tableModel.removeRow(row);
//                updateTotalLabel(totalLabel);
//            } else {
//                JOptionPane.showMessageDialog(this, "Select an item to remove.");
//            }
//        });
//
//        confirmSaleButton.addActionListener(e -> {
//            if (currentSaleItems.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "No items to sell.");
//                return;
//            }
//            String saleID = salesManager.generateSaleID();
//            boolean success = salesManager.addSale(saleID, currentSaleItems, currentEmployee);
//            if (success) {
//                JOptionPane.showMessageDialog(this, "Sale confirmed. Sale ID: " + saleID);
//                currentSaleItems.clear();
//                tableModel.setRowCount(0);
//                updateTotalLabel(totalLabel);
//            } else {
//                JOptionPane.showMessageDialog(this, "Error confirming sale.");
//            }
//        });
//
//        medicineSearchField.addKeyListener(new KeyAdapter() {
//            public void keyReleased(KeyEvent e) {
//                String query = medicineSearchField.getText();
//                List<Medicine> suggestions = medicineManager.getMedicineNameSuggestions(query);
//                JPopupMenu popup = new JPopupMenu();
//                for (Medicine med : suggestions) {
//                    JMenuItem item = new JMenuItem(med.getName());
//                    item.addActionListener(ev -> medicineSearchField.setText(med.getName()));
//                    popup.add(item);
//                }
//                if (!suggestions.isEmpty()) {
//                    popup.show(medicineSearchField, 0, medicineSearchField.getHeight());
//                }
//            }
//        });
//    }
//
//    private void updateTotalLabel(JLabel label) {
//        SalesRecord temp = new SalesRecord("TEMP", currentSaleItems, "", currentEmployee, true, null);
//        label.setText("Total: Rs. " + String.format("%.2f", temp.calculateTotal()));
//    }
//}
//    private SalesRecordManager salesManager;
//    private MedicineManager medicineManager;
//    private List<SaleItem> currentSaleItems = new ArrayList<>();
//private JPopupMenu popup = new JPopupMenu();
//
//
//    public AddNewSalePanel(SalesRecordManager salesManager, MedicineManager medicineManager) {
//        this.salesManager = salesManager;
//        this.medicineManager = medicineManager;
//
//        // GUI Components declared and initialized here
//        JTextField medicineSearchField = new JTextField(15);
//        JTextField quantityField = new JTextField(5);
//        JTextField employeeNameField = new JTextField(10);
//
//        JButton addItemButton = new JButton("Add Item");
//        JButton removeItemButton = new JButton("Remove Selected");
//        JButton confirmSaleButton = new JButton("Confirm Sale");
//        JLabel totalLabel = new JLabel("Total: Rs. 0.00");
//
//        String[] columns = {"Medicine", "Quantity", "Price", "Total"};
//        DefaultTableModel tableModel = new DefaultTableModel(columns, 0);
//        JTable saleTable = new JTable(tableModel);
//        JScrollPane scrollPane = new JScrollPane(saleTable);
//
//        JPanel topPanel = new JPanel(new FlowLayout());
//        topPanel.add(new JLabel("Processed By:"));
//        topPanel.add(employeeNameField);
//        topPanel.add(new JLabel("Medicine:"));
//        topPanel.add(medicineSearchField);
//        topPanel.add(new JLabel("Quantity:"));
//        topPanel.add(quantityField);
//        topPanel.add(addItemButton);
//        topPanel.add(removeItemButton);
//
//        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
//        bottomPanel.add(totalLabel);
//        bottomPanel.add(confirmSaleButton);
//
//        setLayout(new BorderLayout());
//        add(topPanel, BorderLayout.NORTH);
//        add(scrollPane, BorderLayout.CENTER);
//        add(bottomPanel, BorderLayout.SOUTH);
//
//        addItemButton.addActionListener(e -> {
//            String name = medicineSearchField.getText().trim();
//            String qtyText = quantityField.getText().trim();
//            if (name.isEmpty() || qtyText.isEmpty()) return;
//
//            Medicine med = medicineManager.findMedicineByName(name);
//            if (med == null) {
//                JOptionPane.showMessageDialog(this, "Medicine not found.");
//                return;
//            }
//
//            int qty;
//            try {
//                qty = Integer.parseInt(qtyText);
//            } catch (NumberFormatException ex) {
//                JOptionPane.showMessageDialog(this, "Invalid quantity.");
//                return;
//            }
//
//            SaleItem item = salesManager.createSaleItem(med, qty);
//            if (item == null) {
//                JOptionPane.showMessageDialog(this, "Invalid quantity or stock not enough.");
//                return;
//            }
//
//            currentSaleItems.add(item);
//            tableModel.addRow(new Object[]{med.getName(), qty, med.getPrice(), item.calculateItemTotal()});
//            updateTotalLabel(totalLabel);
//            medicineSearchField.setText("");
//            quantityField.setText("");
//        });
//
//        removeItemButton.addActionListener(e -> {
//            int row = saleTable.getSelectedRow();
//            if (row != -1) {
//                SaleItem item = currentSaleItems.get(row);
//                item.getMedicine().updateStock(item.getQuantity());
//                currentSaleItems.remove(row);
//                tableModel.removeRow(row);
//                updateTotalLabel(totalLabel);
//            } else {
//                JOptionPane.showMessageDialog(this, "Select an item to remove.");
//            }
//        });
//
//        confirmSaleButton.addActionListener(e -> {
//            if (currentSaleItems.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "No items to sell.");
//                return;
//            }
//            String empName = employeeNameField.getText().trim();
//            if (empName.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Please enter your name.");
//                return;
//            }
//            String saleID = salesManager.generateSaleID();
//         
////
////            SalesRecord sale = salesManager.addSale(saleID, currentSaleItems, empName);
//SalesRecord sale = salesManager.addSale(saleID, currentSaleItems, empName);
//            if (sale!=null) {
//             
//StringBuilder receipt = new StringBuilder();
//        receipt.append("🧾 SALE RECEIPT\n");
//        receipt.append("Sale ID: ").append(saleID).append("\n");
//        
//        receipt.append("Processed By: ").append(empName).append("\n");
//         receipt.append("Date/Time: ").append(sale.getCreatedAt().toString()).append("\n");
//        receipt.append("-------------------------------------------------\n");
//        double grandTotal = 0.0;
//        for (SaleItem item : currentSaleItems) {
//            double itemTotal = item.calculateItemTotal();
//           receipt.append(item.getMedicine().getName())
//                   .append(" x ").append(item.getQuantity())
//                   .append(" @ ").append(item.getMedicine().getPrice())
//                   .append(" = Rs. ").append(String.format("%.2f", itemTotal)).append("\n");
//            grandTotal += itemTotal;
//        }
//        receipt.append("-------------------------------------------------\n");
//        receipt.append("Grand Total: Rs. ").append(String.format("%.2f", grandTotal)).append("\n");
//
//        // Show receipt
//        JTextArea textArea = new JTextArea(receipt.toString());
//        textArea.setEditable(false);
//        JOptionPane.showMessageDialog(this, new JScrollPane(textArea), "Sale Receipt", JOptionPane.INFORMATION_MESSAGE);
//
//        // Reset
//        currentSaleItems.clear();
//        tableModel.setRowCount(0);
//        updateTotalLabel(totalLabel);
//    } else {
//        JOptionPane.showMessageDialog(this, "Error confirming sale.");
//    }
//        });
//
////        medicineSearchField.addKeyListener(new KeyAdapter() {
////            public void keyReleased(KeyEvent e) {
////                String query = medicineSearchField.getText();
////                List<Medicine> suggestions = medicineManager.getMedicineNameSuggestions(query);
////                JPopupMenu popup = new JPopupMenu();
////                for (Medicine med : suggestions) {
////                    JMenuItem item = new JMenuItem(med.getName());
////                    item.addActionListener(ev -> medicineSearchField.setText(med.getName()));
////                    popup.setVisible(false);
////                    popup.add(item);
////                }
////                if (!suggestions.isEmpty()) {
////
////                    popup.show(medicineSearchField, 0, medicineSearchField.getHeight());
////                }
////            }
////        });
////    }
//  medicineSearchField.addKeyListener(new KeyAdapter() {
//            public void keyReleased(KeyEvent e) {
//                showSuggestions(medicineSearchField);
//            }
//        });
//
//
//    }
//
//    private void showSuggestions(JTextField medicineSearchField) {
//        String query = medicineSearchField.getText();
//        if (query.isEmpty()) {
//            popup.setVisible(false);
//            return;
//        }
//
//        List<Medicine> suggestions = medicineManager.getMedicineNameSuggestions(query);
////            popup.setFocusable(false);
//        popup.removeAll();
//
//        for (Medicine med : suggestions) {
//            JMenuItem item = new JMenuItem(med.getName());
//            item.addActionListener(ev -> {
//                medicineSearchField.setText(med.getName());
//                popup.setVisible(false);
//            });
//            popup.add(item);
//        }
//
//        if (!suggestions.isEmpty()) {
//            popup.show(medicineSearchField, 0, medicineSearchField.getHeight());
//        } else {
//            popup.setVisible(false);
//        }
//    }
//
//   
//
//    private void updateTotalLabel(JLabel label) {
////        SalesRecord temp = new SalesRecord("TEMP", currentSaleItems, "", "", true, null);
////        label.setText("Total: Rs. " + String.format("%.2f", temp.calculateTotal()));
//double total = 0;
//    for (SaleItem item : currentSaleItems) {
//        total += item.calculateItemTotal();
//    }
//    label.setText("Total: Rs. " + String.format("%.2f", total));
//    }
//}  

  

    private SalesRecordManager salesManager;
    private MedicineManager medicineManager;
    private Customer_Manager customerManager;
//    private ViewAllSalePanel viewPanel;
    private List<SaleItem> currentSaleItems = new ArrayList<>();
    private JPopupMenu popup = new JPopupMenu();
// Add class-level variable
private JComboBox<Customer> customerComboBox;

    public AddNewSalePanel(SalesRecordManager salesManager, MedicineManager medicineManager,Customer_Manager customerManager)//,ViewAllSalePanel viewPanel 
    {
        this.salesManager = salesManager;
        this.medicineManager = medicineManager;
        this.customerManager = customerManager;
//       this.viewPanel=viewPanel;


        JTextField medicineSearchField = new JTextField(15);
        JTextField quantityField = new JTextField(5);
        JTextField employeeNameField = new JTextField(10);
//        JComboBox<String> customerComboBox = new JComboBox<>();
//        for (Customer customer : salesManager.getCustomerList()) {
//            customerComboBox.addItem(customer.getName());
//        }
     customerComboBox = new JComboBox<>();
     customerComboBox.setPreferredSize(new Dimension(150, 25)); // ya jitna chahein
     refreshCustomerDropdown();

      


        JButton addItemButton = new JButton("Add Item");
        JButton removeItemButton = new JButton("Remove Selected");
        JButton confirmSaleButton = new JButton("Confirm Sale");
        JLabel totalLabel = new JLabel("Total: Rs. 0.00");

        String[] columns = {"Medicine", "Quantity", "Price", "Total"};
        DefaultTableModel tableModel = new DefaultTableModel(columns, 0);
        JTable saleTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(saleTable);

        JPanel topPanel = new JPanel(new FlowLayout());
        topPanel.setPreferredSize(new Dimension(1100, 100));
        topPanel.add(new JLabel("Processed By:"));
        topPanel.add(employeeNameField);
        topPanel.add(new JLabel("Customer:"));
        topPanel.add(customerComboBox);
        topPanel.add(new JLabel("Medicine:"));
        topPanel.add(medicineSearchField);
        topPanel.add(new JLabel("Quantity:"));
        topPanel.add(quantityField);
        topPanel.add(addItemButton);
        topPanel.add(removeItemButton);

        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        bottomPanel.add(totalLabel);
        bottomPanel.add(confirmSaleButton);

        setLayout(new BorderLayout());
        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        addItemButton.addActionListener(e -> {
            String name = medicineSearchField.getText().trim();
            String qtyText = quantityField.getText().trim();
            if (name.isEmpty() || qtyText.isEmpty()) return;

            Medicine med = medicineManager.findMedicineByName_DB(name);
            if (med == null) {
                JOptionPane.showMessageDialog(this, "Medicine not found.");
                return;
            }

            int qty;
            try {
                qty = Integer.parseInt(qtyText);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid quantity.");
                return;
            }

            SaleItem item = salesManager.createSaleItem(med, qty);
            if (item == null) {
                JOptionPane.showMessageDialog(this, "Invalid quantity or stock not enough.");
                return;
            }

            currentSaleItems.add(item);
            tableModel.addRow(new Object[]{med.getName(), qty, med.getPrice(), item.calculateItemTotal()});
            updateTotalLabel(totalLabel);
            medicineSearchField.setText("");
            quantityField.setText("");
        });

        removeItemButton.addActionListener(e -> {
//           int row = saleTable.getSelectedRow();
//    if (row != -1) {
//        SaleItem item = currentSaleItems.get(row);
//        item.getMedicine().updateStock(item.getQuantity());
//
//       try (Connection con = DBConnection.getConnection()) {
//    Medicine med = item.getMedicine();
//    int restoredQty = item.getQuantity();
//    int updatedStock = med.getStockQuantity() + restoredQty;
//
//    med.setStockQuantity(updatedStock); // in-memory update
//
//    // ✅ Option 1 call
//    medicineManager.updateMedicineStockInDatabase(med.getMedicineID(), updatedStock, con);
//}
// catch (SQLException ex) {
//            ex.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Database error while updating medicine stock.");
//        }
//
//        currentSaleItems.remove(row);
//        tableModel.removeRow(row);
//        updateTotalLabel(totalLabel);
//    } else {
//        JOptionPane.showMessageDialog(this, "Select an item to remove.");
//    }
//});
int row = saleTable.getSelectedRow();
    if (row != -1) {
        currentSaleItems.remove(row); // Just remove from list
        tableModel.removeRow(row);    // Remove from table
        updateTotalLabel(totalLabel); // Update total
    } else {
        JOptionPane.showMessageDialog(this, "Select an item to remove.");
    }
});
       
        
        
        confirmSaleButton.addActionListener(e -> {
           if (currentSaleItems.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No items to sell.");
        return;
    }

    String empName = employeeNameField.getText().trim();
    if (empName.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter your name.");
        return;
    }

    Customer customer = (Customer) customerComboBox.getSelectedItem();
    if (customer == null) {
        JOptionPane.showMessageDialog(this, "Customer not found.");
        return;
    }

    String saleID = salesManager.generateSaleIDFromDatabase();

    SalesRecord sale = salesManager.addSale(saleID, customer, currentSaleItems, empName, LocalDateTime.now());

    if (sale != null) {
//        try (Connection con = DBConnection.getConnection()) {
//            salesManager.insertSaleRecordToDatabase(sale);
//
//            for (SaleItem item : sale.getSoldItems()) {
////                item.getMedicine().updateStock(item.getQuantity());
//Medicine med = item.getMedicine();
////int currentStock = med.getStockQuantity();
////int quantitySold = item.getQuantity();
////int newStock = currentStock - quantitySold;
//
//// Update in memory
////med.setStockQuantity(newStock);
//                medicineManager.updateMedicineStockInDatabase(med.getMedicineID(), med.getStockQuantity(), con);
//            }
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Database error while saving sale.");
//            return;
//        }
try (Connection con = DBConnection.getConnection()) {
    con.setAutoCommit(false); // ✅ Transaction start

    // Insert sale record
    salesManager.insertSaleRecordToDatabase(sale);

    // For each sale item
   for (SaleItem item : sale.getSoldItems()) {
    item.getMedicine().updateStock(item.getQuantity());
        Medicine med = item.getMedicine();

        // ❌ This is MISSING
        // ❌ No update to DB, only memory update ho rahi

        // ✅ Correct: Option 1 call
        int newStock = med.getStockQuantity() - item.getQuantity();
        med.setStockQuantity(newStock);
        medicineManager.updateMedicineStockInDatabase(med.getMedicineID(), newStock, con);
}


    con.commit(); // ✅ All successful
} catch (SQLException ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(this, "Database error while saving sale.");
}


        StringBuilder receipt = new StringBuilder();
        receipt.append("🧾 SALE RECEIPT\n");
        receipt.append("Sale ID: ").append(saleID).append("\n");
        receipt.append("Processed By: ").append(empName).append("\n");
        receipt.append("Customer: ").append(customer).append("\n");
        receipt.append("Date: ").append(sale.getCreatedAt().toString()).append("\n");
        receipt.append("-------------------------------------------------\n");

        double grandTotal = 0.0;
        for (SaleItem item : currentSaleItems) {
            double itemTotal = item.calculateItemTotal();
            receipt.append(item.getMedicine().getName())
                   .append(" x ").append(item.getQuantity())
                   .append(" @ ").append(item.getMedicine().getPrice())
                   .append(" = Rs. ").append(String.format("%.2f", itemTotal)).append("\n");
            grandTotal += itemTotal;
        }

        receipt.append("-------------------------------------------------\n");
        receipt.append("Grand Total: Rs. ").append(String.format("%.2f", grandTotal)).append("\n");

        JTextArea textArea = new JTextArea(receipt.toString());
        textArea.setEditable(false);
        JOptionPane.showMessageDialog(this, new JScrollPane(textArea), "Sale Receipt", JOptionPane.INFORMATION_MESSAGE);

        currentSaleItems.clear();
        tableModel.setRowCount(0);
        updateTotalLabel(totalLabel);
    } else {
        JOptionPane.showMessageDialog(this, "Error confirming sale.");
    }
});


        medicineSearchField.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent e) {
                showSuggestions(medicineSearchField);
            }
        });
    }

    private void showSuggestions(JTextField medicineSearchField) {
        String query = medicineSearchField.getText();
        if (query.isEmpty()) {
            popup.setVisible(false);
            return;
        }

        List<Medicine> suggestions = medicineManager.searchMedicinesByName_DB(query);
        popup.removeAll();

        for (Medicine med : suggestions) {
            JMenuItem item = new JMenuItem(med.getName());
            item.addActionListener(ev -> {
                medicineSearchField.setText(med.getName());
                popup.setVisible(false);
            });
            popup.add(item);
        }

        if (!suggestions.isEmpty()) {
            popup.show(medicineSearchField, 0, medicineSearchField.getHeight());
        } else {
            popup.setVisible(false);
        }
    }

    private void updateTotalLabel(JLabel label) {
        double total = 0;
        for (SaleItem item : currentSaleItems) {
            total += item.calculateItemTotal();
        }
        label.setText("Total: Rs. " + String.format("%.2f", total));
    }
    
    public void refreshCustomerDropdown() {
    customerComboBox.removeAllItems();
    for (Customer customer : customerManager.getAllCustomersFromDatabase()) {
        customerComboBox.addItem(customer);
        

    }
}
}  

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

