/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pharmacymanagmentsystem;


import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
/**
 *
 * @author mapple.pk
 */
public class EditSalePanel extends javax.swing.JPanel {

    /**
     * Creates new form EditSalePannel
     */
    public EditSalePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
 private SalesRecordManager salesManager;
 private Customer_Manager customerManager;
private MedicineManager medicineManager;

    private JTextField saleIDField;
    private JLabel statusLabel;
    private JTable itemTable;
    private DefaultTableModel tableModel;
    private JButton loadButton, removeItemButton, saveChangesButton;
    private SalesRecord currentSale;

    public EditSalePanel(SalesRecordManager salesManager,Customer_Manager customerManager, MedicineManager medicineManager) {
        this.salesManager = salesManager;
        this.customerManager = customerManager;
    this.medicineManager = medicineManager;

        // Top controls
        saleIDField = new JTextField(15);
        loadButton = new JButton("Load Sale");
        statusLabel = new JLabel("Status: ---");

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.add(new JLabel("Enter Sale ID:"));
        topPanel.add(saleIDField);
        topPanel.add(loadButton);
        topPanel.add(statusLabel);

        // Table setup
        String[] columns = {"Medicine", "Quantity", "Price", "Total"};
        tableModel = new DefaultTableModel(columns, 0) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        itemTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(itemTable);

        // Buttons
        removeItemButton = new JButton("Remove Selected Item");
        saveChangesButton = new JButton("Save Changes");

        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        bottomPanel.add(removeItemButton);
        bottomPanel.add(saveChangesButton);

        setLayout(new BorderLayout());
        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        // Load Button Logic
        loadButton.addActionListener(e -> {
            String saleID = saleIDField.getText().trim();
            currentSale = salesManager.findSaleByIDFromDatabase(saleID, customerManager, medicineManager);
            tableModel.setRowCount(0);
            if (currentSale == null) {
                JOptionPane.showMessageDialog(this, "Sale not found.");
                statusLabel.setText("Status: ---");
                return;
            }
            currentSale.updateEditableStatus();
//            currentSale.updateEditableStatusInDatabase();
            statusLabel.setText("Status: " + (currentSale.isEditable() ? "Editable" : "Locked"));
            for (SaleItem item : currentSale.getSoldItems()) {
                tableModel.addRow(new Object[]{
                        item.getMedicine().getName(),
                        item.getQuantity(),
                        item.getMedicine().getPrice(),
                        item.calculateItemTotal()
                });
            }
        });

        // Remove item
        removeItemButton.addActionListener(e -> {
            if (currentSale == null || !currentSale.isEditable()) {
                JOptionPane.showMessageDialog(this, "Sale is locked or not loaded.");
                return;
            }
            int selectedRow = itemTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Select a row to remove.");
                return;
            }
            SaleItem item = currentSale.getSoldItems().get(selectedRow);
            item.getMedicine().updateStock(item.getQuantity());
            currentSale.getSoldItems().remove(selectedRow);
            tableModel.removeRow(selectedRow);
            statusLabel.setText("Item removed. Click 'Save Changes' to commit.");

        });

        // Save changes
        saveChangesButton.addActionListener(e -> {
    if (currentSale == null || !currentSale.isEditable()) {
        JOptionPane.showMessageDialog(this, "Sale is locked or not loaded.");
        return;
    }

    boolean success = salesManager.updateSaleItemsInDatabase(currentSale,medicineManager);
    if (success) {
        JOptionPane.showMessageDialog(this, "Changes saved to database!");
    } else {
        JOptionPane.showMessageDialog(this, "Failed to save changes.");
    }
});

    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

