/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pharmacymanagmentsystem;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
/**
 *
 * @author mapple.pk
 */
public class UpdateMedicinePanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateMedicinePanel
     */
    public UpdateMedicinePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
//public UpdateMedicinePanel(MedicineManager manager) {
//        setLayout(new GridLayout(4, 2, 5, 5));
//
//        JTextField idField = new JTextField();
//        JTextField quantityField = new JTextField();
//        JButton updateButton = new JButton("Update Stock");
//
//        updateButton.addActionListener(e -> {
//            String id = idField.getText();
//            int qty;
//            try {
//                qty = Integer.parseInt(quantityField.getText());
//            } catch (NumberFormatException ex) {
//                JOptionPane.showMessageDialog(this, "Enter valid quantity");
//                return;
//            }
//
//            Medicine med = manager.findMedicineByID(id);
//            if (med != null) {
//                manager.updateMedicineStockGUI(med, qty);
//                JOptionPane.showMessageDialog(this, "Stock updated successfully!");
//            } else {
//                JOptionPane.showMessageDialog(this, "Medicine not found");
//            }
//        });
//
//        add(new JLabel("Enter Medicine ID:"));
//        add(idField);
//        add(new JLabel("Enter Quantity to Add:"));
//        add(quantityField);
//        add(new JLabel(""));
//        add(updateButton);
//    }
//


    private JComboBox<String> searchModeBox;
    private JTextField searchField;

    private JTextField nameField, typeField, priceField, stockField, expiryField, reorderField;
    private JCheckBox prescriptionBox;
//    private JComboBox<Manufacturer> manufacturerBox;
    private JButton searchButton, updateButton;

    private Medicine currentMedicine;

    public UpdateMedicinePanel(MedicineManager manager) {
        setLayout(new BorderLayout(10, 10));

        // Top Panel
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        searchModeBox = new JComboBox<>(new String[]{"Search by ID", "Search by Name"});
        searchField = new JTextField(15);
        searchButton = new JButton("Search");
        updateButton = new JButton("Update");
        updateButton.setEnabled(false);

        topPanel.add(new JLabel("Search Mode:"));
        topPanel.add(searchModeBox);
        topPanel.add(searchField);
        topPanel.add(searchButton);
        topPanel.add(updateButton);
        add(topPanel, BorderLayout.NORTH);

        // Center Form
        JPanel formPanel = new JPanel(new GridLayout(8, 2, 10, 10));
        nameField = new JTextField(); nameField.setEditable(false);
        typeField = new JTextField(); typeField.setEditable(false);
        priceField = new JTextField(); priceField.setEditable(false);
        stockField = new JTextField(); // Will be ADD stock
        expiryField = new JTextField();
        reorderField = new JTextField();
        prescriptionBox = new JCheckBox("Prescription Required"); prescriptionBox.setEnabled(false);
//        manufacturerBox = new JComboBox<>(); manufacturerBox.setEnabled(false);

        formPanel.add(new JLabel("Name:")); formPanel.add(nameField);
        formPanel.add(new JLabel("Type:")); formPanel.add(typeField);
        formPanel.add(new JLabel("Price:")); formPanel.add(priceField);
        formPanel.add(new JLabel("Add Quantity:")); formPanel.add(stockField);
        formPanel.add(new JLabel("Expiry Date (YYYY-MM-DD):")); formPanel.add(expiryField);
        formPanel.add(new JLabel("Reorder Level:")); formPanel.add(reorderField);
        formPanel.add(new JLabel("Prescription:")); formPanel.add(prescriptionBox);
//        formPanel.add(new JLabel("Manufacturer:")); formPanel.add(manufacturerBox);

        add(formPanel, BorderLayout.CENTER);

        // Fill manufacturer list
//        for (Manufacturer m : manager.getManufacturerList()) {
//            manufacturerBox.addItem(m);
//        }

        // Search Action
        searchButton.addActionListener(e -> {
            String input = searchField.getText().trim();
            if (input.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter search value.");
                return;
            }

            if (searchModeBox.getSelectedItem().equals("Search by ID")) {
                currentMedicine = manager.findMedicineByID_DB(input);
            } else {
                currentMedicine = manager.findMedicineByName_DB(input);
            }

            if (currentMedicine != null) {
                nameField.setText(currentMedicine.getName());
                typeField.setText(currentMedicine.getType());
                priceField.setText(String.valueOf(currentMedicine.getPrice()));
                stockField.setText(""); // user will enter quantity to add
                stockField.setToolTipText("Current Stock: " + currentMedicine.getStockQuantity());
                expiryField.setText(currentMedicine.getExpiryDate());
                reorderField.setText(String.valueOf(currentMedicine.getReorderLevel()));
                prescriptionBox.setSelected(currentMedicine.getRequiresPrescription());
//                manufacturerBox.setSelectedItem(currentMedicine.getManufacturer());
                updateButton.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(this, "Medicine not found.");
                clearFields();
            }
        });

        // Update Action
        updateButton.addActionListener(e -> {
            try {
                int qtyToAdd = Integer.parseInt(stockField.getText().trim());
                String expiry = expiryField.getText().trim();
                int reorder = Integer.parseInt(reorderField.getText().trim());

                manager.updateEssentialFields_DB(currentMedicine, qtyToAdd, expiry, reorder);
                JOptionPane.showMessageDialog(this, "Medicine updated.");
                updateButton.setEnabled(false);
                clearFields();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input: " + ex.getMessage());
            }
        });
    }

    private void clearFields() {
        nameField.setText("");
        typeField.setText("");
        priceField.setText("");
        stockField.setText("");
        expiryField.setText("");
        reorderField.setText("");
        prescriptionBox.setSelected(false);
//        manufacturerBox.setSelectedIndex(0);
        updateButton.setEnabled(false);
        currentMedicine = null;
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
