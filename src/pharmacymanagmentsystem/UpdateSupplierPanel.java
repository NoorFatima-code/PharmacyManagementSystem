/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pharmacymanagmentsystem;
import javax.swing.*;
import java.awt.*;
import java.util.List;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.*;
import pharmacymanagmentsystem.DBConnection;
/**
 *
 * @author HP
 */
public class UpdateSupplierPanel extends javax.swing.JPanel {
  private JComboBox<String> searchModeBox;
   private JTextField searchField;
   private JTextField nameField;
   private JTextField companyField;
   private JTextField contactField;
   private JButton searchBtn;
   private JButton updateBtn;
   private String currentSupplierID;
 
   

    /**
     */
//    public UpdateSupplierPanel() {
//        initComponents();
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
 
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
                     
 public UpdateSupplierPanel(Supplier_Manager supplierManager) {
        setLayout(new GridBagLayout());
        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Row 0: Search Mode
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(new JLabel("Search Mode:"), gbc);

        searchModeBox = new JComboBox<>(new String[]{"Search by ID", "Search by Name"});
        gbc.gridx = 1;
        add(searchModeBox, gbc);

        // Row 1: Search Field
        gbc.gridx = 0;
        gbc.gridy = 1;
        add(new JLabel("Enter Supplier ID or Name:"), gbc);

        searchField = new JTextField(20);
        gbc.gridx = 1;
        add(searchField, gbc);

        // Row 2: Search Button
        gbc.gridx = 0;
        gbc.gridy = 2;
        add(new JLabel(""), gbc); // empty label for alignment

        searchBtn = new JButton("Search");
        gbc.gridx = 1;
        add(searchBtn, gbc);

        // Row 3: Name
        gbc.gridx = 0;
        gbc.gridy = 3;
        add(new JLabel("Name:"), gbc);

        nameField = new JTextField(20);
        gbc.gridx = 1;
        add(nameField, gbc);

        // Row 4: Company
        gbc.gridx = 0;
        gbc.gridy = 4;
        add(new JLabel("Company:"), gbc);

        companyField = new JTextField(20);
        gbc.gridx = 1;
        add(companyField, gbc);

        // Row 5: Contact
        gbc.gridx = 0;
        gbc.gridy = 5;
        add(new JLabel("Contact (10-digit):"), gbc);

        contactField = new JTextField(20);
        gbc.gridx = 1;
        add(contactField, gbc);

        // Row 6: Update Button
        gbc.gridx = 0;
        gbc.gridy = 6;
        add(new JLabel(""), gbc);

        updateBtn = new JButton("Update");
        updateBtn.setEnabled(false);
        gbc.gridx = 1;
        add(updateBtn, gbc);

        // Attach Listeners
        attachListeners();
    }

    private void attachListeners() {
        searchBtn.addActionListener((ActionEvent e) -> {
            String input = searchField.getText().trim();
            if (input.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter supplier ID or Name.", "Input Required", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try (Connection conn = DBConnection.getConnection()) {
                String sql = searchModeBox.getSelectedItem().equals("Search by ID")
                        ? "SELECT supplier_id, name, company, contact FROM suppliers WHERE supplier_id = ?"
                        : "SELECT supplier_id, name, company, contact FROM suppliers WHERE name = ?";

                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setString(1, input);
                    try (ResultSet rs = pstmt.executeQuery()) {
                        if (rs.next()) {
                            currentSupplierID = rs.getString("supplier_id");
                            nameField.setText(rs.getString("name"));
                            companyField.setText(rs.getString("company"));
                            contactField.setText(rs.getString("contact"));
                            updateBtn.setEnabled(true);
                            JOptionPane.showMessageDialog(this, "Supplier found! You can now update details.", "Search Success", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Supplier not found.", "Not Found", JOptionPane.WARNING_MESSAGE);
                            clearFields();
                        }
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                clearFields();
            }
        });

        updateBtn.addActionListener((ActionEvent e) -> {
            if (currentSupplierID == null) {
                JOptionPane.showMessageDialog(this, "No supplier selected. Search first.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            String newName = nameField.getText().trim();
            String newCompany = companyField.getText().trim();
            String newContact = contactField.getText().trim();

            if (newName.isEmpty() && newCompany.isEmpty() && newContact.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter at least one field to update.", "Input Required", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (!newContact.isEmpty() && !newContact.matches("\\d{10}")) {
                JOptionPane.showMessageDialog(this, "Contact must be a 10-digit number.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            StringBuilder sqlBuilder = new StringBuilder("UPDATE suppliers SET ");
            int paramIndex = 1;

            try (Connection conn = DBConnection.getConnection()) {
                if (!newName.isEmpty()) sqlBuilder.append("name = ?, ");
                if (!newCompany.isEmpty()) sqlBuilder.append("company = ?, ");
                if (!newContact.isEmpty()) sqlBuilder.append("contact = ?, ");

                sqlBuilder.setLength(sqlBuilder.length() - 2); // remove last comma
                sqlBuilder.append(" WHERE supplier_id = ?");

                try (PreparedStatement pstmt = conn.prepareStatement(sqlBuilder.toString())) {
                    if (!newName.isEmpty()) pstmt.setString(paramIndex++, newName);
                    if (!newCompany.isEmpty()) pstmt.setString(paramIndex++, newCompany);
                    if (!newContact.isEmpty()) pstmt.setString(paramIndex++, newContact);
                    pstmt.setString(paramIndex, currentSupplierID);

                    int rows = pstmt.executeUpdate();
                    if (rows > 0) {
                        JOptionPane.showMessageDialog(this, "Supplier updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        clearFields();
                    } else {
                        JOptionPane.showMessageDialog(this, "Update failed.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        });
    }

    private void clearFields() {
        searchField.setText("");
        nameField.setText("");
        companyField.setText("");
        contactField.setText("");
        updateBtn.setEnabled(false);
        currentSupplierID = null;
    }
    
    // Variables declaration - do not modify                     
    // End of variables declaration                   

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

