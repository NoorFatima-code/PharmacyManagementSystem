/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pharmacymanagmentsystem;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
/**
 *
 * @author mapple.pk
 */
public class SearchSalePanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchSalePanel
     */
    public SearchSalePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
private SalesRecordManager salesManager;
private Customer_Manager customerManager;
private MedicineManager medicineManager;

   public SearchSalePanel(SalesRecordManager salesManager, Customer_Manager customerManager, MedicineManager medicineManager) {
    this.salesManager = salesManager;
    this.customerManager = customerManager;
    this.medicineManager = medicineManager;

        // Components
        JTextField searchField = new JTextField(15);
        JComboBox<String> searchTypeCombo = new JComboBox<>(new String[]{"Sale ID", "Processed By"});
        JButton searchButton = new JButton("Search");
        JButton clearButton = new JButton("Clear");

        String[] columns = {"Sale ID", "Processed By", "Total", "Editable"};
        DefaultTableModel tableModel = new DefaultTableModel(columns, 0){
         @Override
    public boolean isCellEditable(int row, int column) {
        return false; // 🔒 make all cells non-editable
    }
};
        JTable salesTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(salesTable);

        // Top Panel
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.setPreferredSize(new Dimension(1100, 60));
        topPanel.add(new JLabel("Search:"));
        topPanel.add(searchField);
        topPanel.add(searchTypeCombo);
        topPanel.add(searchButton);
        topPanel.add(clearButton);

        // Layout
        setLayout(new BorderLayout());
        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        // 🔍 Search Button Logic
        searchButton.addActionListener(e -> {
            String query = searchField.getText().trim();
            String type = (String) searchTypeCombo.getSelectedItem();
            tableModel.setRowCount(0); // clear old results

            if (query.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a search value.");
                return;
            }

            if (type.equals("Sale ID")) {
                SalesRecord sale = salesManager.findSaleByIDFromDatabase(query, customerManager, medicineManager);
                if (sale != null) {
                    sale.updateEditableStatus();
                    sale.updateEditableStatusInDatabase();
                    tableModel.addRow(new Object[]{
                            sale.getSaleID(),
                            sale.getProcessedBy(),
                            String.format("%.2f", sale.calculateTotal()),
                            sale.isEditable() ? "Editable" : "Locked"
                    });
                } else {
                    JOptionPane.showMessageDialog(this, "Sale not found.");
                }
            } else if (type.equals("Processed By")) {
                List<SalesRecord> results = salesManager.findSalesByProcessedByNameFromDatabase(query, customerManager, medicineManager);
                if (results.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No sales found for that employee.");
                } else {
                    for (SalesRecord sale : results) {
                         sale.updateEditableStatus();
                         sale.updateEditableStatusInDatabase();
                        tableModel.addRow(new Object[]{
                                sale.getSaleID(),
                                sale.getProcessedBy(),
                                String.format("%.2f", sale.calculateTotal()),
                                sale.isEditable() ? "Editable" : "Locked"
                        });
                    }
                }
            }
        });

        // ❌ Clear Button Logic
        clearButton.addActionListener(e -> {
            searchField.setText("");
            tableModel.setRowCount(0);
        });

        // Optional: double click to show full receipt
       

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
}